/*
 * Designed and developed by 2021 skydoves (Jaewoong Eum)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.skydoves.bindables

import java.util.Locale
import kotlin.reflect.KClass
import kotlin.reflect.KFunction
import kotlin.reflect.KProperty

/**
 * @author skydoves (Jaewoong Eum)
 *
 * A binding resource manager for providing proper DataBinding resources in the application.
 * This manager disassembles the `BR` class that generated by DataBinding process on compile time,
 * and uses those resources for providing proper binding information.
 */
object BindingManager {

  /** A map for holding information of the generated fields in the BR class. */
  private var bindingFieldsMap: HashMap<String, Int>? = null

  /** A binding resource class that generated by the DataBinding processor. */
  private const val BR: String = "BR"

  /** Java Bean conventions for presenting a boolean. */
  private const val JAVA_BEAN_BOOLEAN: String = "is"

  /** Java Bean conventions for presenting a getter. */
  private const val JAVA_BEAN_GETTER: String = "get"

  /**
   * Binds the `BR` class into the [BindingManager].
   * This method only needs to be called once in the application.
   * The `BR` class will be disassembled by the [BindingManager], binding fields will be used
   * for finding the proper binding ID of properties.
   *
   * @param bindingClass The `BR` class that generated by the DataBinding processor.
   * @return The size of the stored fields.
   * @throws IllegalArgumentException If we bind non `BR` class into the manager.
   */
  fun bind(bindingClass: KClass<*>): Int {
    if (bindingClass.simpleName != BR) {
      throw IllegalArgumentException("We can bind only `BR` class that generated by the DataBinding processor.")
    }

    synchronized(this) {
      if (bindingFieldsMap.isNullOrEmpty()) {
        bindingFieldsMap = HashMap()
      } else {
        return 0
      }
    }

    return storeDeclaredBindingFieldsIntoMap(bindingClass)
  }

  /**
   * Disassembles and stores declared binding fields in the `BR` class.
   *
   * @param bindingClass The `BR` class that generated by the DataBinding processor.
   * @return The size of the stored fields.
   */
  private fun storeDeclaredBindingFieldsIntoMap(bindingClass: KClass<*>): Int {
    for (field in bindingClass.java.declaredFields) {
      val name = field.name
      val value = field.getInt(this)
      if (!name.isNullOrEmpty()) {
        bindingFieldsMap?.put(name, value)
      }
    }
    return bindingFieldsMap?.size ?: 0
  }

  /**
   * Returns proper binding ID by property.
   *
   * @param property A kotlin [androidx.databinding.Bindable] property for finding proper binding ID.
   */
  internal fun getBindingIdByProperty(property: KProperty<*>): Int {
    var propertyName = property.name.decapitalize(Locale.ENGLISH)
    if (propertyName.startsWith(JAVA_BEAN_BOOLEAN)) {
      propertyName = propertyName.replaceFirst(JAVA_BEAN_BOOLEAN, String()).decapitalize(Locale.ENGLISH)
    }
    return bindingFieldsMap?.get(propertyName) ?: 0
  }

  /**
   * Returns proper binding ID by function.
   *
   * @param function A kotlin [androidx.databinding.Bindable] function for finding proper binding ID.
   */
  internal fun getBindingIdByFunction(function: KFunction<*>): Int {
    var functionName = function.name.decapitalize(Locale.ENGLISH)
    if (functionName.startsWith(JAVA_BEAN_GETTER)) {
      functionName = functionName.replaceFirst(JAVA_BEAN_GETTER, String()).decapitalize(Locale.ENGLISH)
    }
    return bindingFieldsMap?.get(functionName) ?: 0
  }
}
